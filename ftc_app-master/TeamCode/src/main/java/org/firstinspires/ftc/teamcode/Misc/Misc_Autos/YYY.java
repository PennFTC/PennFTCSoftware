package org.firstinspires.ftc.teamcode;import com.qualcomm.robotcore.eventloop.opmode.Autonomous;import com.qualcomm.robotcore.eventloop.opmode.Disabled;import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;import org.firstinspires.ftc.robotcore.external.ClassFactory;import org.firstinspires.ftc.robotcore.external.matrices.OpenGLMatrix;import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;import org.firstinspires.ftc.robotcore.external.navigation.RelicRecoveryVuMark;import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackable;import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackables;import com.qualcomm.robotcore.hardware.ColorSensor;import com.qualcomm.robotcore.hardware.DcMotor;import com.qualcomm.robotcore.hardware.DcMotorSimple;import com.qualcomm.robotcore.hardware.DigitalChannel;import com.qualcomm.robotcore.hardware.DistanceSensor;import com.qualcomm.robotcore.hardware.Servo;import com.qualcomm.robotcore.hardware.TouchSensor;import com.qualcomm.robotcore.hardware.VoltageSensor;import com.qualcomm.robotcore.util.ElapsedTime;import com.qualcomm.robotcore.hardware.NormalizedColorSensor;import com.qualcomm.robotcore.hardware.NormalizedRGBA;import android.app.Activity;import android.graphics.Color;import android.view.View;import org.firstinspires.ftc.robotcore.external.ClassFactory;import org.firstinspires.ftc.robotcore.external.navigation.RelicRecoveryVuMark;import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackable;import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackables;import java.io.File;import java.util.UnknownFormatConversionException;import com.qualcomm.hardware.bosch.BNO055IMU;import com.qualcomm.hardware.bosch.JustLoggingAccelerationIntegrator;import com.qualcomm.robotcore.eventloop.opmode.Autonomous;import com.qualcomm.robotcore.eventloop.opmode.Disabled;import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;import com.qualcomm.robotcore.util.ReadWriteFile;import org.firstinspires.ftc.robotcore.external.Func;import org.firstinspires.ftc.robotcore.external.navigation.Acceleration;import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;import org.firstinspires.ftc.robotcore.external.navigation.Orientation;import org.firstinspires.ftc.robotcore.external.navigation.Position;import org.firstinspires.ftc.robotcore.external.navigation.Velocity;import org.firstinspires.ftc.robotcore.internal.system.AppUtil;import java.util.Locale;@Autonomous(name="yy") public class YYY extends LinearOpMode {DcMotor leftdrive;DcMotor rightdrive;DcMotor arm;DcMotor relic;Servo leftclaw;Servo rightclaw;Servo thwack;Servo rgrab;Servo rrotate;DigitalChannel touch;ColorSensor colorS;DistanceSensor distance;BNO055IMU imu;Orientation angles;Acceleration gravity;OpenGLMatrix lastLocation = null;VuforiaLocalizer vuforia;private ElapsedTime mRuntime = new ElapsedTime();static final double     COUNTS_PER_MOTOR_REV    = 1440 ;static final double     DRIVE_GEAR_REDUCTION    = 1.0 ;static final double     WHEEL_DIAMETER_INCHES   = 4.0 ;static final double     COUNTS_PER_INCH         = (COUNTS_PER_MOTOR_REV * DRIVE_GEAR_REDUCTION) / (WHEEL_DIAMETER_INCHES * 3.1415);static final double     driveSpeed             = 0.4;static final double     turnSpeed              = 0.5;boolean bLedOn = true;boolean bLedOff= false;@Override public void runOpMode() {int cameraMonitorViewId = hardwareMap.appContext.getResources().getIdentifier("cameraMonitorViewId", "id", hardwareMap.appContext.getPackageName());VuforiaLocalizer.Parameters parameters = new VuforiaLocalizer.Parameters(cameraMonitorViewId);parameters.vuforiaLicenseKey = "AS0UfjX/////AAAAGRskp0HfSUnsoynVbGYPNsdMokODK2h8a" + "GN23UwiTvIqzIelkSNYCun2eZtoII5VtMXdkhgzhrrxXSpSDB7bkpSWNBNCSykmHOj8LIA7j" + "ZInq57jmYvzEx1Wv05LqRortLqqX4EuXv6RHPnD//44rNVLuT3pJBy7tMSn8p8Snzics+YUM" + "HAivTV967K7E0i9QbS1OMXJE5fasIg3XX/3LnWhHeeTRwEYHA9M7ENUyoJ6wZzq7xHwvQxcGC" + "RudADp9LUGIrLCTcPCzNkNYQGbAcGY/F1U5KosGNNh/GXFsJKMbV2kK7vDTgmaVvgk7YVkOQ" + "nQIiB/2gkzUVa0xIdUILpd17s8X19p3jYCquGMZLwn";parameters.cameraDirection = VuforiaLocalizer.CameraDirection.BACK;this.vuforia = ClassFactory.createVuforiaLocalizer(parameters);VuforiaTrackables relicTrackables = this.vuforia.loadTrackablesFromAsset("RelicVuMark");VuforiaTrackable relicTemplate = relicTrackables.get(0);relicTemplate.setName("relicVuMarkTemplate");mRuntime.reset();leftdrive = hardwareMap.dcMotor.get("0");rightdrive = hardwareMap.dcMotor.get("1");arm = hardwareMap.dcMotor.get("2");relic = hardwareMap.dcMotor.get("3");leftclaw = hardwareMap.servo.get("0");rightclaw = hardwareMap.servo.get("1");thwack = hardwareMap.servo.get("2");rgrab = hardwareMap.servo.get("4");rrotate = hardwareMap.servo.get("3");colorS = hardwareMap.colorSensor.get("color");distance = hardwareMap.get(DistanceSensor.class, "color");touch = hardwareMap.digitalChannel.get("touch");telemetry.log().setCapacity(12);BNO055IMU.Parameters parameter = new BNO055IMU.Parameters();parameter.angleUnit           = BNO055IMU.AngleUnit.DEGREES;parameter.accelUnit           = BNO055IMU.AccelUnit.METERS_PERSEC_PERSEC;parameter.calibrationDataFile = "BNO055IMUCalibration.json";parameter.loggingEnabled      = true;parameter.loggingTag          = "IMU";parameter.accelerationIntegrationAlgorithm = new JustLoggingAccelerationIntegrator();imu = hardwareMap.get(BNO055IMU.class, "imu");imu.initialize(parameter);float hsvValues[] = {0F, 0F, 0F};final float values[] = hsvValues;final double SCALE_FACTOR = 255;int relativeLayoutId = hardwareMap.appContext.getResources().getIdentifier("RelativeLayout", "id", hardwareMap.appContext.getPackageName());final View relativeLayout = ((Activity) hardwareMap.appContext).findViewById(relativeLayoutId);telemetry.addData("voltage", "%.1f volts", new Func<Double>() {@Override public Double value() {return getBatteryVoltage();}});composeTelemetry();telemetry.log().add("Waiting for start...");leftdrive.setPower(0);rightdrive.setPower(0);arm.setPower(0);leftdrive.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);rightdrive.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);arm.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);leftclaw.setPosition(1);rightclaw.setPosition(0);thwack.setPosition(0);leftdrive.setDirection(DcMotorSimple.Direction.FORWARD);rightdrive.setDirection(DcMotorSimple.Direction.REVERSE);arm.setDirection(DcMotorSimple.Direction.REVERSE);colorS.enableLed(bLedOn);getRuntime();telemetry.addData("Status", "Resetting Encoders");telemetry.update();leftdrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);rightdrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);leftdrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);rightdrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);telemetry.update();waitForStart();imu.startAccelerationIntegration(new Position(), new Velocity(), 1000);relicTrackables.activate();while (opModeIsActive()) {RelicRecoveryVuMark vuMark = RelicRecoveryVuMark.from(relicTemplate);telemetry.update();if (vuMark == RelicRecoveryVuMark.LEFT) {telemetry.addData("VuMark", "Left visible", vuMark);callapseArms();raiseArm();getBallColorandknockOffBallL();} else {if (vuMark == RelicRecoveryVuMark.CENTER) {telemetry.addData("VuMark", "Center Visible");callapseArms();raiseArm();getBallColorandknockOffBallC();} else {if (vuMark == RelicRecoveryVuMark.RIGHT) {telemetry.addData("VuMark" , "Right Visible");callapseArms();raiseArm();getBallColorandknockOffBallR();} else {if (vuMark == RelicRecoveryVuMark.UNKNOWN) {telemetry.addData("Vumark", "I Ain't seen nothing");}}}}Color.RGBToHSV((int) (colorS.red() * SCALE_FACTOR), (int) (colorS.green() * SCALE_FACTOR), (int) (colorS.blue() * SCALE_FACTOR), hsvValues);telemetry.addData("Distance (in)", String.format(Locale.US, "%.02f", distance.getDistance(DistanceUnit.INCH)));telemetry.addData("Alpha", colorS.alpha());telemetry.addData("Red  ", colorS.red());telemetry.addData("Green", colorS.green());telemetry.addData("Blue ", colorS.blue());telemetry.addData("Hue", hsvValues[0]);telemetry.addData("Status", "Run Time: " + mRuntime.toString());relativeLayout.post(new Runnable() {public void run() {relativeLayout.setBackgroundColor(Color.HSVToColor(0xff, values));}});telemetry.update();}relativeLayout.post(new Runnable() {public void run() {relativeLayout.setBackgroundColor(Color.WHITE);}});telemetry.addData("Status", "Run Time: " + mRuntime.toString());telemetry.addData("Status", "Initialized");telemetry.update();}public void encoderDrive(double speed, double leftInches, double rightInches, double timeoutS) {int newLeftTarget;int newRightTarget;if (opModeIsActive()) {newLeftTarget = leftdrive.getCurrentPosition() + (int) (leftInches * COUNTS_PER_INCH);newRightTarget = rightdrive.getCurrentPosition() + (int) (rightInches * COUNTS_PER_INCH);leftdrive.setTargetPosition(newLeftTarget);rightdrive.setTargetPosition(newRightTarget);leftdrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);rightdrive.setMode(DcMotor.RunMode.RUN_TO_POSITION);mRuntime.reset();leftdrive.setPower(Math.abs(speed));rightdrive.setPower(Math.abs(speed));while (opModeIsActive() && (mRuntime.seconds() < timeoutS) && (leftdrive.isBusy() && rightdrive.isBusy())) {telemetry.addData("Path1", "Running to %7d :%7d", newLeftTarget, newRightTarget);telemetry.addData("Path2", "Running at %7d :%7d", telemetry.addData("voltage", "%.1f volts", new Func<Double>() {@Override public Double value() {return getBatteryVoltage();}}), leftdrive.getCurrentPosition(), rightdrive.getCurrentPosition());telemetry.update();}while (opModeIsActive() && (mRuntime.seconds() >= 30)) {colorS.enableLed(bLedOff);float g1LY = gamepad1.left_stick_y;float g1RY = gamepad1.right_stick_y;float g1LX = gamepad1.left_stick_x;float g1RX = gamepad1.right_stick_x;float g2LY = gamepad2.left_stick_y;float g2RY = gamepad2.right_stick_y;float g2LX = gamepad2.left_stick_x;float g2RX = gamepad2.right_stick_x;boolean g2a = gamepad2.a;boolean g2b = gamepad2.b;boolean g2y = gamepad2.y;boolean g2x = gamepad2.x;boolean g2rBumper = gamepad2.right_bumper;boolean g2lBumper = gamepad2.left_bumper;boolean g2rStick = gamepad2.right_stick_button;boolean g2lStick = gamepad2.left_stick_button;boolean g2dUp = gamepad2.dpad_up;boolean g2dDown = gamepad2.dpad_down;boolean g2dLeft = gamepad2.dpad_left;boolean g2dRight = gamepad2.dpad_right;telemetry.addData("Status", "Run Time: " + mRuntime.toString());telemetry.addData("Status", "Initialized");leftdrive.setPower(g1LY);rightdrive.setPower(g1RY);arm.setPower(g2LY);relic.setPower(g2RY);if (g2rStick) {thwack.setPosition(1);} else {thwack.setPosition(0);}if (g2a) {leftclaw.setPosition(1);rightclaw.setPosition(0);} else {if  (g2b) {leftclaw.setPosition(0);rightclaw.setPosition(1);}  else {leftclaw.setPosition(.25);rightclaw.setPosition(.5);}}if (g2rBumper) {rgrab.setPosition(1);} else {rgrab.setPosition(0);}if (g2lBumper) {rrotate.setPosition(1);} else {rrotate.setPosition(0);}if (mRuntime.time() >= 125) {telemetry.addData("Status", "End Game");}if (mRuntime.time() >= 155) {telemetry.addData("Status", "Good Game");stop();}telemetry.update();}}}private void stap() {leftdrive.setPower(0);rightdrive.setPower(0);arm.setPower(0);}public void getBallColor() {thwack.setPosition(1);sleep(500);telemetry.addData("Color" ,colorS.blue() );telemetry.addData("Color" ,colorS.red() );sleep(500);sleep(500);}public void knockOffBallL() {if (colorS.blue() > colorS.red()) {stap();sleep(500);callapseArms();thwack.setPosition(0);sleep(500);leftclaw.setPosition(1);rightclaw.setPosition(0);sleep(100);stap();stap();sleep(10000000);} else {stap();sleep(500);callapseArms();thwack.setPosition(0);sleep(500);leftclaw.setPosition(1);rightclaw.setPosition(0);sleep(100);stap();sleep(1000000);}}public void knockOffBallC() {if (colorS.blue() > colorS.red()) {stap();sleep(500);callapseArms();thwack.setPosition(0);sleep(500);leftclaw.setPosition(1);rightclaw.setPosition(0);sleep(100);stap();stap();sleep(10000000);/* center */} else {stap();sleep(500);callapseArms();thwack.setPosition(0);sleep(500);leftclaw.setPosition(1);rightclaw.setPosition(0);sleep(100);stap();sleep(1000000);}}public void knockOffBallR() {if (colorS.blue() > colorS.red()) {stap();sleep(500);callapseArms();thwack.setPosition(0);sleep(500);leftclaw.setPosition(1);rightclaw.setPosition(0);sleep(100);stap();stap();sleep(10000000);} else {/* encoderDrive(.5 * driveSpeed,  2,  2, 0.4); // forward march */stap();sleep(500);callapseArms();thwack.setPosition(0);sleep(500);leftclaw.setPosition(1);rightclaw.setPosition(0);sleep(100);stap();sleep(1000000);}}public void getBallColorandknockOffBallL() {getBallColor();knockOffBallL();}public void getBallColorandknockOffBallC() {getBallColor();knockOffBallC();}public void getBallColorandknockOffBallR() {getBallColor();knockOffBallR();}public void callapseArms() {leftclaw.setPosition(.25);rightclaw.setPosition(0);sleep(500);}public void raiseArm() {arm.setPower(-1);sleep(2000);stap();}void composeTelemetry() {/* At the beginning of each telemetry update, grab a bunch of data// from the IMU that we will then display in separate lines.*/telemetry.addAction(new Runnable() { @Override public void run() {/* Acquiring the angles is relatively expensive; we don't want// to do that in each of the three items that need that info, as that's// three times the necessary expense.*/angles   = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);gravity  = imu.getGravity();}});telemetry.addLine().addData("status", new Func<String>() {@Override public String value() {return imu.getSystemStatus().toShortString();}}).addData("calib", new Func<String>() {@Override public String value() {return imu.getCalibrationStatus().toString();}});telemetry.addLine().addData("heading", new Func<String>() {@Override public String value() {return formatAngle(angles.angleUnit, angles.firstAngle);}}).addData("roll", new Func<String>() {@Override public String value() {return formatAngle(angles.angleUnit, angles.secondAngle);}}).addData("pitch", new Func<String>() {@Override public String value() {return formatAngle(angles.angleUnit, angles.thirdAngle);}});telemetry.addLine().addData("grvty", new Func<String>() {@Override public String value() {return gravity.toString();}}).addData("mag", new Func<String>() {@Override public String value() {return String.format(Locale.getDefault(), "%.3f", Math.sqrt(gravity.xAccel*gravity.xAccel + gravity.yAccel*gravity.yAccel + gravity.zAccel*gravity.zAccel));}});}double getBatteryVoltage() {double result = Double.POSITIVE_INFINITY;for (VoltageSensor sensor : hardwareMap.voltageSensor) {double voltage = sensor.getVoltage();if (voltage > 0) {result = Math.min(result, voltage);}}return result;}/*----------------------------------------------------------------------------------------------// Formatting//----------------------------------------------------------------------------------------------*/String formatAngle(AngleUnit angleUnit, double angle) {return formatDegrees(AngleUnit.DEGREES.fromUnit(angleUnit, angle));}String formatDegrees(double degrees){return String.format(Locale.getDefault(), "%.1f", AngleUnit.DEGREES.normalize(degrees));}}